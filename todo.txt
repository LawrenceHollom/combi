== CHROMATIC GAME ==
- If something is unplayable then Bob wins immediately. This appears to not be implemented.
- Only other hope of speedup: switch up the order in which we check moves by some heuristic
-- Maybe we spend ages searching the tree for one of B's moves when there's a better one that would win instantly
-- Batshit crazy idea: train a very quick-to-eval ML algo to guess what the best next move is.

== ITERATOR AND AUTOMORPHISMS ==
- Better hashes for vertices; start throwing onion info in.
- Keep Annotations as &mut and continually update a HashTable of representatives:
-- This takes a VertexSet of fixed things and returns a VertexSet of class representatives.
-- Then things can be made even faster.
-- This should be calculated on-the-fly by working out a few autos
- Need some kind of DFS token to help with keeping track of when it's not worth
   searching for autojs any more when dfs-ing...
- There are probably some issues with finding autojs. Dig into this more.

== MORE REFACTORING ==
- Perhaps VertexSet should know what n is?
-- Maybe it should also know its own size? But this will slow down some operations.

== THE KITCHEN SINK ==
- Maybe add option for increasing by number of edges or something
- test with sink((size>0)&&(theta>=acyclic)) -> halts at n=15
- Test fewer graphs for the very big n -> if more than 1000 then filter randomly
- Only run arrow commands on successful graphs (as in until)

== UNTIL ==
- Print out info about how many graphs made it past each step
- This way we could see e.g. how many triangle-free graphs we needed to check.
- Be more intelligent about cutting verbosity:
-- If threshold barely passed, then still print regular updates.
-- Have a vec of thresholds and store a vec of how many have succeeded to each point.
-- Multiply or divide verbosity by 2 according to how close we are to target (of one message every few seconds?)

== PLANAR GIRTH CONSTRUCTOR ==
- k_gons is broken at the moment?
- Also need a way to plug this into a cubic-ifyer.

== BOWTIES ==
- Check that struct(bowties(d),num) agrees with old bowties framework
- Then rip out old framework.

== MIXED STRUCTURED GRAPH GENERATOR ==
- Take as input a graph with highlighted edges, each with one end of deg 1
- Either glue these edges together top-to-tail
- Or glue multiple deg-1 vertices together
- Imagined use case is regular graphs, so could deduce how many to glue
   from the degree.

== GRAPH IDENTIFIER ==
- Some tools to, given a graph (presumably from a file), try and identify it
- Simplest way is to run kitchen sink to try and ID it
- Could also identify vertex symmetric classes.
- See graph iterators below; this probably ties in well.

== DOMINATION ==
- Optimistic: either through construction or otherwise, notice when a graph has
  a small set of edges which split the graph into two parts. Then dp over these.
- Use case is probably cubic graphs, and sets of three edges (as graphs will be
  just barely 3-connected.)
- If done correctly then can compute domination numbers for very large graphs.

== HOUSE OF GRAPHS ==
- Have a new kitchen sink option for smashing through houseofgraphs
-- Work this in with the old one in some sensible way.

== BUNKBEDS ==
- The code is very (very) slow, and naive. Should be some wins to be had in terms of speed
- Instead of iterating through all subsets of edges, dfs:
-- Then once both endpoints are in, can cut off immediately.
-- Should speed things up a little.

== CHROMATIC GAME MONOTONICITY ==
- until(seq(0,2,5,4,1),chi=3,chi_g_greedy>=5,!(a_wins_chi_g(4)),a_wins_chi_g(3))
- process(12)->a_wins_chi_g(3),a_wins_chi_g(4)
-- Seek [true, false]
-- Perhaps write some automated thing to run this test?

== BUGS ==
- Maybe ->() has stopped working? Gets picked up as infix-like
- sink(domination>10) doesn't trip on E(11)

== HELP COMMAND ==
- Print all the various operations.
- And write code to do this automatically so it doesn't need maintaining.

== HOPELESSLY OPTIMISTIC INTERFACE GOALS ==
- Write up an interface in curses that allows for nicer printing of info
- Also could allow for better editing of commands, and command entry.
- Could have panels and all kinds of nice things
- Would want a new crate for curses interaction and all that stuff.
-- Is some of this already written somewhere?
- And you would spend like a week writing this for yourself because???

== KEEP CLIPPY HAPPY ==
- You don't want to anger clippy.